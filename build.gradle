plugins {
	id 'java'
	id 'org.springframework.boot' version '3.0.4'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'jacoco'
	id("org.sonarqube") version "3.3"
}

group = 'com.brokis'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '19'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation("com.google.guava:guava:31.1-jre")
	implementation 'io.swagger:swagger-annotations:2.0.0-rc2'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-amqp'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.amqp:spring-rabbit-test'
	runtimeOnly 'com.h2database:h2'
}

test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}
sonarqube {
	properties{
		property("sonar.projectName", "gestorDepositos-Banco")
		property("sonar.host.url", "http://localhost:9000")
		property("sonar.login", "admin")
		property("sonar.password", "admin123")
	}
}
jacocoTestReport {
	dependsOn(test)
	reports {
		xml.enabled false
		html.enabled true
	}

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					"**/dto/**",
					"**/modelo/*"
			])
		}))
	}
}

